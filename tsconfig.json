{
  "compilerOptions": {
    "target": "ES6",                  /* Specify ECMAScript target version */
    "module": "ES6",                  /* 'none', 'commonjs', 'amd', 'system', etc */
    "useDefineForClassFields": true,  /* Flag switches to the upcoming ECMA runtime behavior */
    "moduleResolution": "Node",
    "lib": ["ES6", "DOM"],            /* Default set of type definitions for known JS APIs */


    "outDir": "dist",                 /* Where should the generated files go to */
    "composite": true,                /* Enforces certain constraints which make it possible for build
                                        tools to quickly determine if a project has been built yet. */

    "strict": true,                   /* Enables a wide range of type checking behavior that results in stronger
                                        guarantees of program correctness. Turning this on is equivalent to enabling
                                        all of the strict mode family options */
    "resolveJsonModule": true,        /* Allows importing modules with a ‘.json’ extension,
                                        which is a common practice in node projects */
    "isolatedModules": true,          /* Tells TypeScript to warn you if you write certain code
                                        that can’t be correctly interpreted by a single-file
                                        transpilation process */
    "esModuleInterop": true,          /* Enables interop between CommonJS and ES */
    "noUnusedLocals": true,           /* Report errors on unused local variables */
    "noUnusedParameters": true,       /* Report errors on unused parameters in functions */
    "noImplicitReturns": true,        /* Check all code paths in a function to ensure they return a value */
    "skipLibCheck": false,            /* Don't skip type checking of declaration files. We are pedantic. */
    "allowUnreachableCode": false     /* Raises compiler errors about unreachable code */
  },
  "include": [ "src" ]
}
